name: Deploy Django Project

on:
  push:
    branches:
      - main
      - dev
      - uat
  pull_request:
    branches:
      - main
      - dev
      - uat

jobs:
  snyk:
    permissions:
      contents: read 
      security-events: write
      actions: read 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@v4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif

      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

      - name: Snyk IaC test and report
        run: snyk iac test --report

      - name: Build a Docker image
        run: docker build -t mansikanwar2001/django-on-docker:latest .

      - name: Snyk Container monitor
        run: snyk container monitor mansikanwar2001/django-on-docker:latest --file=Dockerfile

  security:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r app -o bandit-report.html

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.html

  deploy:
    runs-on: ubuntu-latest
    needs: [security, snyk]
    strategy:
      matrix:
        environment: [dev, uat, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Run Tests
        run: python app/manage.py test

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: app/
          push: true
          tags: |
            mansikanwar2001/django-on-docker:${{ matrix.environment }}
            mansikanwar2001/django-on-docker:${{ matrix.environment }}-${{ github.sha }}

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS ECS
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecs update-service --cluster my-cluster --service my-service-${{ matrix.environment }} --force-new-deployment

      - name: Apply database migrations
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          RDS_DB_NAME: ${{ secrets['RDS_DB_NAME_' + matrix.environment] }}
          RDS_USERNAME: ${{ secrets['RDS_USERNAME_' + matrix.environment] }}
          RDS_PASSWORD: ${{ secrets['RDS_PASSWORD_' + matrix.environment] }}
          RDS_HOST: ${{ secrets['RDS_HOST_' + matrix.environment] }}
          RDS_PORT: ${{ secrets['RDS_PORT_' + matrix.environment] }}
        run: |
          ECS_TASK_ARN=$(aws ecs run-task --cluster my-cluster --launch-type FARGATE --task-definition my-task-${{ matrix.environment }} --network-configuration "awsvpcConfiguration={subnets=[subnet-xxxxxxx],securityGroups=[sg-xxxxxxx],assignPublicIp=ENABLED}" --overrides "{\"containerOverrides\":[{\"name\":\"my-container\",\"command\":[\"python manage.py migrate\"]}]}" --query 'tasks[0].taskArn' --output text)
          aws ecs wait tasks-stopped --cluster my-cluster --tasks $ECS_TASK_ARN

